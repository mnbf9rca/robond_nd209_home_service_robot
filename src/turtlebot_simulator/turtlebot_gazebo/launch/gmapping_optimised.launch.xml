<launch>
    <arg name="scan_topic" default="scan" />
    <arg name="base_frame" default="base_footprint"/>
    <arg name="odom_frame" default="odom"/>

    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
        <param name="base_frame" value="$(arg base_frame)"/>
        <param name="odom_frame" value="$(arg odom_frame)"/>


        <!--Minimum score for considering the outcome of the scan matching good. Can avoid
             jumping pose estimates in large open spaces when using laser scanners with limited
              range (e.g. 5m). Scores go up to 600+, try 50 for example when experiencing jumping estimate issues.
              (float, default: 0.0)-->
        <param name="minimumScore" value="0.0"/>
        <!--linearUpdate (float, default: 1.0)
        Process a scan each time the robot translates this far-->
        <param name="linearUpdate" value="0.1"/>
        <!--angularUpdate (float, default: 0.5)
        Process a scan each time the robot rotates this far - def 0.5-->
        <param name="angularUpdate" value="0.1"/>
        <!--lskip (int, default: 0)
            Number of beams to skip in each scan. Take only every (n+1)th laser ray for computing a match (0 = take all rays)-->
        <param name="lskip" value="10"/>
        <!--Initial map size (in metres)-->
        <param name="xmin" value="-10.0"/>
        <param name="ymin" value="-10.0"/>
        <param name="xmax" value="10.0"/>
        <param name="ymax" value="10.0"/>
        <!--particles (int, default: 30)
        Number of particles in the filter-->
        <param name="particles" value="30"/>
        <!-- map_update_interval (float, default: 5.0)
            How long (in seconds) between updates to the map. Lowering this number updates the occupancy grid more often, at the expense of greater computational load.-->
        <param name="map_update_interval" value="1.0"/>


        <remap from="scan" to="$(arg scan_topic)"/>
    </node>
</launch>